{
  "version": 3,
  "sources": ["../src/constants.js", "../src/module.js", "../src/effect.js", "../src/scene.js", "../src/utils.js", "../src/apps/perception-menu.js", "../src/geometry.js", "../src/token.js", "../src/actor.js", "../src/roll.js", "../src/chat.js", "../src/action.js", "../src/combat.js", "../src/detection.js", "../src/settings.js", "../src/main.js"],
  "sourcesContent": ["export const COVER_UUID = 'Compendium.pf2e.other-effects.Item.I9lfZUiCwMiGogVi'\r\n\r\nexport const VISIBILITY_VALUES = {\r\n    [undefined]: 0,\r\n    concealed: 1,\r\n    hidden: 2,\r\n    undetected: 3,\r\n    unnoticed: 4,\r\n}\r\n\r\nexport const COVER_VALUES = {\r\n    [undefined]: 0,\r\n    lesser: 1,\r\n    standard: 2,\r\n    greater: 3,\r\n    'greater-prone': 4,\r\n}\r\n", "export const MODULE_ID = 'pf2e-perception'\r\n\r\nexport function templatePath(template) {\r\n    return `modules/${MODULE_ID}/templates/${template}.hbs`\r\n}\r\n\r\nexport function localize(...args) {\r\n    const data = args.at(-1)\r\n    const useFormat = typeof data === 'object'\r\n\r\n    const keys = useFormat ? args.slice(0, -1) : args\r\n    keys.unshift(MODULE_ID)\r\n\r\n    return game.i18n[useFormat ? 'format' : 'localize'](keys.join('.'), data)\r\n}\r\n\r\nexport function getFlag(doc, flag) {\r\n    return doc.getFlag(MODULE_ID, flag)\r\n}\r\n\r\nexport function setFlag(doc, flag, value) {\r\n    return doc.setFlag(MODULE_ID, flag, value)\r\n}\r\n\r\nexport function unsetFlag(doc, flag) {\r\n    return doc.unsetFlag(MODULE_ID, flag, true)\r\n}\r\n\r\nexport function getFlags(doc) {\r\n    return getProperty(doc, `flags.${MODULE_ID}`) ?? {}\r\n}\r\n\r\nexport function getSetting(setting) {\r\n    return game.settings.get(MODULE_ID, setting)\r\n}\r\n\r\nexport function getStandardSetting(scene) {\r\n    return getFlag(scene, 'standard') ?? getSetting('standard')\r\n}\r\n", "import { COVER_UUID, COVER_VALUES } from './constants.js'\r\nimport { localize } from './module.js'\r\n\r\nexport function createFlatFootedSource(visibility) {\r\n    const name = game.i18n.localize(`PF2E.condition.${visibility}.name`)\r\n    const condition = game.pf2e.ConditionManager.getCondition('flat-footed', { name })\r\n    return condition.toObject()\r\n}\r\n\r\nexport function createCoverSource(cover) {\r\n    const bonus = COVER_VALUES[cover]\r\n\r\n    return {\r\n        _id: 'I9lfZUiCwMiGogVi',\r\n        img: 'systems/pf2e/icons/conditions-2/status_acup.webp',\r\n        name: localize('cover', cover),\r\n        system: {\r\n            description: {\r\n                gm: '',\r\n                value: \"<p>When you're behind an obstacle that could block weapons, guard you against explosions, and make you harder to detect, you're behind cover. Standard cover gives you a +2 circumstance bonus to AC, to Reflex saves against area effects, and to Stealth checks to Hide, Sneak, or otherwise avoid detection. You can increase this to greater cover using the Take Cover basic action, increasing the circumstance bonus to +4. If cover is especially light, typically when it's provided by a creature, you have lesser cover, which grants a +1 circumstance bonus to AC. A creature with standard cover or greater cover can attempt to use Stealth to Hide, but lesser cover isn't sufficient.</p>\",\r\n            },\r\n            rules: [\r\n                { domain: 'all', key: 'RollOption', option: `self:cover-bonus:${bonus}` },\r\n                { domain: 'all', key: 'RollOption', option: `self:cover-level:${cover}` },\r\n                {\r\n                    key: 'FlatModifier',\r\n                    predicate: [\r\n                        { or: [{ and: ['self:condition:prone', 'item:ranged'] }, { not: 'self:cover-level:greater-prone' }] },\r\n                    ],\r\n                    selector: 'ac',\r\n                    type: 'circumstance',\r\n                    value: bonus,\r\n                },\r\n                {\r\n                    key: 'FlatModifier',\r\n                    predicate: ['area-effect', { not: 'self:cover-level:greater-prone' }],\r\n                    selector: 'reflex',\r\n                    type: 'circumstance',\r\n                    value: bonus,\r\n                },\r\n                {\r\n                    key: 'FlatModifier',\r\n                    predicate: [\r\n                        { or: ['action:hide', 'action:sneak', 'avoid-detection'] },\r\n                        { not: 'self:cover-level:greater-prone' },\r\n                    ],\r\n                    selector: 'stealth',\r\n                    type: 'circumstance',\r\n                    value: bonus,\r\n                },\r\n                {\r\n                    key: 'FlatModifier',\r\n                    predicate: ['action:avoid-notice', { not: 'self:cover-level:greater-prone' }],\r\n                    selector: 'initiative',\r\n                    type: 'circumstance',\r\n                    value: bonus,\r\n                },\r\n            ],\r\n            slug: 'effect-cover',\r\n        },\r\n        type: 'effect',\r\n        flags: { core: { sourceId: COVER_UUID } },\r\n    }\r\n}\r\n\r\nexport function findChoiceSetRule(item, flag = undefined) {\r\n    if (!item) return undefined\r\n    return item.system.rules.find(rule => rule.key === 'ChoiceSet' && (!flag || rule.flag === flag))\r\n}\r\n", "import { getStandardSetting, localize } from './module.js'\r\n\r\nexport function renderSceneConfig(config, html) {\r\n    const tab = html.find('.tab[data-tab=\"basic\"]')\r\n    const checked = getStandardSetting(config.object)\r\n\r\n    tab.find('hr').first().after(`<div class=\"form-group\">\r\n    <label>${localize('settings.standard.name')}</label>\r\n    <input type=\"checkbox\" name=\"flags.pf2e-perception.standard\" ${checked ? 'checked' : ''}>\r\n    <p class=\"notes\">${localize('settings.standard.short')}</p>\r\n</div><hr>`)\r\n\r\n    config.setPosition()\r\n}\r\n\r\nexport function getValidTokens(token) {\r\n    token = token instanceof Token ? token.document : token\r\n    if (!(token instanceof TokenDocument)) return []\r\n    return token.scene.tokens.filter(t => t !== token && t.actor?.isOfType('creature'))\r\n}\r\n\r\nexport function validateTokens(token, tokens) {\r\n    const valid = getValidTokens(token).map(t => t.id)\r\n    return tokens.filter(t => {\r\n        const id = t instanceof Token || t instanceof TokenDocument ? t.id : t\r\n        return valid.includes(id)\r\n    })\r\n}\r\n", "export function modifier(value) {\r\n    return value >= 0 ? `+${value}` : value\r\n}\r\n\r\nexport function omit(object, names) {\r\n    const set = new Set(names)\r\n    return Object.entries(object).reduce((acc, [name, value]) => {\r\n        if (!set.has(name)) acc[name] = value\r\n        return acc\r\n    }, {})\r\n}\r\n\r\nexport function getPrototype(obj, depth = 1) {\r\n    const prototype = Object.getPrototypeOf(obj)\r\n    if (depth > 1) return getPrototype(prototype, depth - 1)\r\n    return prototype.constructor\r\n}\r\n\r\nexport function sortByName(a, b) {\r\n    return a.name.localeCompare(b.name)\r\n}\r\n", "import { isProne } from '../actor.js'\r\nimport { MODULE_ID, localize, templatePath } from '../module.js'\r\nimport { getValidTokens, validateTokens } from '../scene.js'\r\nimport { getTokenData, setTokenData } from '../token.js'\r\nimport { sortByName } from '../utils.js'\r\n\r\nconst VISIBILITIES = ['observed', 'concealed', 'hidden', 'undetected', 'unnoticed']\r\nconst COVERS = ['none', 'lesser', 'standard', 'greater', 'greater-prone']\r\n\r\nexport class PerceptionMenu extends Application {\r\n    #token\r\n    #selected\r\n    #currentData\r\n    #hoverTokenListener\r\n\r\n    constructor({ token, selected, cover }, options = {}) {\r\n        options.title = localize('menu.title', { name: token.name })\r\n        super(options)\r\n\r\n        this.#token = token instanceof TokenDocument ? token.object : token\r\n\r\n        this.#hoverTokenListener = (token, hover) => {\r\n            const tokenId = token.id\r\n            const tokens = this.element.find('[data-token-id]')\r\n            tokens.removeClass('hover')\r\n            if (hover) tokens.filter(`[data-token-id=${tokenId}]`).addClass('hover')\r\n        }\r\n\r\n        this.#currentData = this.#getTokenData(true)\r\n\r\n        if (selected === true) selected = getValidTokens(token).map(t => t.id)\r\n        else if (Array.isArray(selected)) selected = validateTokens(token, selected)\r\n\r\n        this.#selected = selected ?? []\r\n\r\n        if (selected && COVERS.includes(cover)) {\r\n            for (const tokenId of selected) {\r\n                setProperty(this.#currentData, `${tokenId}.cover`, cover)\r\n            }\r\n        }\r\n\r\n        Hooks.on('hoverToken', this.#hoverTokenListener)\r\n    }\r\n\r\n    close(options = {}) {\r\n        Hooks.off('hoverToken', this.#hoverTokenListener)\r\n        super.close(options)\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            minimizable: false,\r\n            template: templatePath('perception-menu'),\r\n        })\r\n    }\r\n\r\n    static openMenu(token, options = {}) {\r\n        const actor = token?.actor\r\n        if (!actor) return\r\n\r\n        const id = `${MODULE_ID}-${actor.uuid}`\r\n        const win = Object.values(ui.windows).find(x => x.id === id)\r\n\r\n        if (win) win.bringToTop()\r\n        else new PerceptionMenu({ ...options, token }, { id }).render(true)\r\n    }\r\n\r\n    get token() {\r\n        return this.#token\r\n    }\r\n\r\n    get document() {\r\n        return this.#token.document\r\n    }\r\n\r\n    get actor() {\r\n        return this.#token.actor\r\n    }\r\n\r\n    get scene() {\r\n        return this.#token.scene\r\n    }\r\n\r\n    getData() {\r\n        const originalData = this.#getTokenData()\r\n        const alliance = this.actor.alliance\r\n        const opposition = alliance === 'party' ? 'opposition' : alliance === 'opposition' ? 'party' : null\r\n        const covers = COVERS.map(value => ({ value, label: localize(`cover.${value}`) }))\r\n\r\n        const tokens = getValidTokens(this.token).map(({ id, name, actor }) => {\r\n            const current = this.#currentData[id] ?? {}\r\n            const original = originalData[id] ?? {}\r\n\r\n            return {\r\n                id,\r\n                name,\r\n                alliance: actor.alliance,\r\n                cover: current.cover ?? 'none',\r\n                visibility: current.visibility ?? 'observed',\r\n                originalCover: original.cover ?? 'none',\r\n                originalVisibility: original.visibility ?? 'observed',\r\n                selected: this.#selected.includes(id),\r\n            }\r\n        })\r\n\r\n        const filterTokens = a => tokens.filter(t => t.alliance === a).sort(sortByName)\r\n\r\n        return {\r\n            i18n: key => localize(`menu.${key}`),\r\n            allies: opposition && filterTokens(alliance),\r\n            enemies: opposition && filterTokens(opposition),\r\n            neutral: opposition ? filterTokens(null) : tokens.sort(sortByName),\r\n            visibilities: VISIBILITIES.map(value => ({ value, label: localize(`menu.visibility.${value}`) })),\r\n            covers: isProne(this.actor) ? covers : covers.slice(0, -1),\r\n            default: {\r\n                visibility: 'observed',\r\n                cover: 'none',\r\n            },\r\n        }\r\n    }\r\n\r\n    #getTokenData(clone) {\r\n        const data = getTokenData(this.document) ?? {}\r\n        return clone ? deepClone(data) : data\r\n    }\r\n\r\n    #setSelected() {\r\n        this.#selected = this.element\r\n            .find('[data-token-id].ui-selected')\r\n            .toArray()\r\n            .map(el => el.dataset.tokenId)\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.filter('.tokens').selectable({\r\n            autoRefresh: false,\r\n            filter: '.token',\r\n            cancel: 'header,select',\r\n            stop: () => this.#setSelected(),\r\n        })\r\n\r\n        html.find('[data-token-id]').on('mouseenter', event => {\r\n            const { tokenId } = event.currentTarget.dataset\r\n            const token = this.scene.tokens.get(tokenId)?.object\r\n            if (!token || token.controlled) return\r\n            token._onHoverIn(event, { hoverOutOthers: true })\r\n        })\r\n\r\n        html.find('[data-action=select-all]').on('click', event => {\r\n            const section = $(event.currentTarget).closest('section')\r\n            const tokens = (section.length ? section : html).find('[data-token-id]')\r\n            const allSelected = tokens.filter(':not(.ui-selected)').length === 0\r\n            tokens.toggleClass('ui-selected', !allSelected)\r\n            this.#setSelected()\r\n        })\r\n\r\n        html.find('[data-action=use-selection]').on('click', event => {\r\n            this.#selected = canvas.tokens.controlled.map(t => t.id)\r\n            this.render()\r\n        })\r\n\r\n        html.find('select[name=visibility], select[name=cover]').on('change', event => {\r\n            const target = event.currentTarget\r\n            const property = target.name\r\n            const defaultValue = property === 'visibility' ? 'observed' : 'none'\r\n            const value = target.value || defaultValue\r\n            const tokenId = target.closest('.token')?.dataset.tokenId\r\n            const tokenIds = tokenId ? [tokenId] : this.#selected\r\n\r\n            for (const tokenId of tokenIds) {\r\n                setProperty(this.#currentData, `${tokenId}.${property}`, value)\r\n            }\r\n\r\n            if (tokenId) {\r\n                target.classList.toggle('changed', value !== target.dataset.original)\r\n                target.classList.toggle('custom', value !== defaultValue)\r\n            } else this.render()\r\n        })\r\n\r\n        html.find('[data-action=reset]').on('click', event => {\r\n            this.#currentData = this.#getTokenData(true)\r\n            this.#selected = []\r\n            this.render()\r\n        })\r\n\r\n        html.find('[data-action=accept]').on('click', async event => {\r\n            await setTokenData(this.document, this.#currentData)\r\n            this.close()\r\n        })\r\n    }\r\n}\r\n", "const EDGES = ['topEdge', 'rightEdge', 'bottomEdge', 'leftEdge']\r\nconst POINTS = [\r\n    { x: 0.25, y: 0.25 },\r\n    { x: 0.5, y: 0.25 },\r\n    { x: 0.75, y: 0.25 },\r\n    { x: 0.25, y: 0.5 },\r\n    { x: 0.5, y: 0.5 },\r\n    { x: 0.75, y: 0.5 },\r\n    { x: 0.25, y: 0.75 },\r\n    { x: 0.5, y: 0.75 },\r\n    { x: 0.75, y: 0.75 },\r\n]\r\nconst CORNERS = [\r\n    { x: 0, y: 0 },\r\n    { x: 1, y: 0 },\r\n    { x: 0, y: 1 },\r\n    { x: 1, y: 1 },\r\n]\r\n\r\nexport function lineIntersectRect(origin, target, rect) {\r\n    for (const edgeName of EDGES) {\r\n        const edge = rect[edgeName]\r\n        if (lineSegmentIntersects(origin, target, edge.A, edge.B)) return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport function lineIntersectWall(origin, target) {\r\n    return CONFIG.Canvas.polygonBackends.move.testCollision(origin, target, { type: 'move', mode: 'any' })\r\n}\r\n\r\nexport function pointToTokenPointsIntersectWall(origin, token, nb) {\r\n    const rect = token.bounds\r\n    let intersected = 0\r\n\r\n    for (const point of POINTS) {\r\n        const coords = getRectPoint(point, rect)\r\n        if (lineIntersectWall(origin, coords)) intersected++\r\n        if (intersected === nb) return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nexport function allTokenCornersToPointIntersectWall(token, target) {\r\n    const rect = token.bounds\r\n    let intersected = 0\r\n\r\n    for (const point of CORNERS) {\r\n        const coords = getRectPoint(point, rect)\r\n        if (lineIntersectWall(coords, target)) intersected++\r\n    }\r\n\r\n    return intersected === 4\r\n}\r\n\r\nfunction getRectPoint(point, rect) {\r\n    return { x: rect.x + rect.width * point.x, y: rect.y + rect.height * point.y }\r\n}\r\n", "import { PerceptionMenu } from './apps/perception-menu.js'\r\nimport { VISIBILITY_VALUES } from './constants.js'\r\nimport { lineIntersectRect, lineIntersectWall, pointToTokenPointsIntersectWall } from './geometry.js'\r\nimport { MODULE_ID, getFlag, getSetting, getStandardSetting, unsetFlag } from './module.js'\r\nimport { getValidTokens } from './scene.js'\r\n\r\nexport function renderTokenHUD(hud, html) {\r\n    if (!hud.object.actor?.isOfType('creature')) return\r\n    html.find('.col.left').append(`<div class=\"control-icon\" data-action=\"pf2e-perception\"><i class=\"fa-solid fa-eye\"></i></div>`)\r\n    html.find('[data-action=pf2e-perception]').on('click', event => PerceptionMenu.openMenu(hud.object))\r\n}\r\n\r\nexport function pasteToken(originals, sources) {\r\n    for (const source of sources) {\r\n        delete source.flags?.[MODULE_ID]\r\n    }\r\n}\r\n\r\nexport function getTokenData(token, ...path) {\r\n    path.unshift('data')\r\n    token = token instanceof Token ? token.document : token\r\n    return getFlag(token, path.join('.'))\r\n}\r\n\r\nexport async function clearTokenData(token) {\r\n    token = token instanceof Token ? token.document : token\r\n    return unsetFlag(token, 'data')\r\n}\r\n\r\nexport async function setTokenData(token, data) {\r\n    const valid = getValidTokens(token).map(t => t.id)\r\n\r\n    for (const tokenId in data) {\r\n        if (!valid.includes(tokenId)) {\r\n            delete data[tokenId]\r\n            continue\r\n        }\r\n        const token = data[tokenId]\r\n        if (token.visibility === 'observed') delete token.visibility\r\n        if (token.cover === 'none') delete token.cover\r\n        if (!token.visibility && !token.cover) delete data[tokenId]\r\n    }\r\n\r\n    token = token instanceof Token ? token.document : token\r\n\r\n    if (isEmpty(data)) return clearTokenData(token)\r\n    else return token.update({ [`flags.${MODULE_ID}.data`]: data }, { diff: false, recursive: false })\r\n}\r\n\r\nexport function hasStandardCover(origin, target) {\r\n    const scene = origin.scene\r\n    if (!getStandardSetting(scene)) return false\r\n\r\n    const standard = getSetting('standard-type')\r\n    if (standard === 'center') return lineIntersectWall(origin.center, target.center)\r\n    else if (standard === 'points') return pointToTokenPointsIntersectWall(origin.center, target, 2)\r\n    // else return allTokenCornersToPointIntersectWall(origin, target.center)\r\n}\r\n\r\nexport function hasLesserCover(originToken, targetToken) {\r\n    if (!getSetting('lesser')) return false\r\n\r\n    const origin = originToken.center\r\n    const target = targetToken.center\r\n\r\n    for (const tokenDocument of originToken.scene.tokens) {\r\n        const token = tokenDocument.object\r\n        if (token === originToken || token === targetToken) continue\r\n        if (lineIntersectRect(origin, target, token.bounds)) return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nexport function getVisibility(origin, target) {\r\n    const systemVisibility = (() => {\r\n        const originActor = origin.actor\r\n        for (const visibility of ['unnoticed', 'undetected', 'hidden', 'concealed']) {\r\n            if (originActor.hasCondition(visibility)) return visibility\r\n        }\r\n    })()\r\n    const visibility = getTokenData(origin, target.id, 'visibility')\r\n    return VISIBILITY_VALUES[systemVisibility] > VISIBILITY_VALUES[visibility] ? systemVisibility : visibility\r\n}\r\n\r\nexport function updateToken(token, data) {\r\n    const flags = data.flags?.['pf2e-perception']\r\n    if (!flags) return\r\n    if (flags.data || flags['-=data'] !== undefined) token.object.renderFlags.set({ refreshVisibility: true })\r\n}\r\n", "import { COVER_UUID, COVER_VALUES, VISIBILITY_VALUES } from './constants.js'\r\nimport { createCoverSource, createFlatFootedSource, findChoiceSetRule } from './effect.js'\r\nimport { getTokenData, getVisibility, hasLesserCover, hasStandardCover } from './token.js'\r\n\r\nexport function getSelfRollOptions(wrapped, prefix) {\r\n    const result = wrapped(prefix)\r\n\r\n    if (prefix === 'origin') {\r\n        const token = getActorToken(this)\r\n        if (token) result.push(`origin:tokenid:${token.id}`)\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport function getContextualClone(wrapped, rollOptions, ephemeralEffects) {\r\n    const originId = rollOptions.find(option => option.startsWith('origin:tokenid:'))?.slice(15)\r\n    if (!originId) return wrapped(rollOptions, ephemeralEffects)\r\n\r\n    const target = getActorToken(this, true)\r\n    const origin = target?.scene.tokens.get(originId).object\r\n    if (!origin || !target) return wrapped(rollOptions, ephemeralEffects)\r\n\r\n    const conditionalCover = getConditionalCover(origin, target, rollOptions)\r\n    if (conditionalCover) ephemeralEffects.push(createCoverSource(conditionalCover))\r\n\r\n    const visibility = getVisibility(origin, target)\r\n    if (VISIBILITY_VALUES[visibility] > VISIBILITY_VALUES.concealed) ephemeralEffects.push(createFlatFootedSource(visibility))\r\n\r\n    return wrapped(rollOptions, ephemeralEffects)\r\n}\r\n\r\nexport function getActorToken(actor, target = false) {\r\n    if (!actor) return undefined\r\n    const tokens = target ? game.user.targets : canvas.tokens.controlled\r\n    return tokens.find(token => token.actor === actor) ?? actor.getActiveTokens().shift() ?? null\r\n}\r\n\r\nexport function isProne(actor) {\r\n    return actor.itemTypes.condition.some(item => item.slug === 'prone')\r\n}\r\n\r\nexport function getCoverEffect(actor, selection = false) {\r\n    const effect = actor.itemTypes.effect.find(x => x.sourceId === COVER_UUID)\r\n    return selection ? findChoiceSetRule(effect)?.selection.level : effect\r\n}\r\n\r\nfunction getConditionalCover(origin, target, options) {\r\n    const ranged = options.includes('item:ranged')\r\n    const prone = ranged ? isProne(target.actor) : false\r\n\r\n    let systemCover = getCoverEffect(target.actor, true)\r\n    if (prone && COVER_VALUES[systemCover] > COVER_VALUES.lesser) return 'greater-prone'\r\n    if (!prone && systemCover === 'greater-prone') systemCover = undefined\r\n\r\n    let cover = getTokenData(target, origin.id, 'cover')\r\n    if (prone && COVER_VALUES[cover] > COVER_VALUES.lesser) return 'greater-prone'\r\n    if (!prone && cover === 'greater-prone') cover = undefined\r\n\r\n    if (\r\n        COVER_VALUES[cover] < COVER_VALUES.standard &&\r\n        COVER_VALUES[systemCover] < COVER_VALUES.standard &&\r\n        hasStandardCover(origin, target)\r\n    ) {\r\n        cover = 'standard'\r\n    } else if (!cover && !systemCover && hasLesserCover(origin, target)) cover = 'lesser'\r\n\r\n    if (prone && COVER_VALUES[cover] > COVER_VALUES.lesser) return 'greater-prone'\r\n\r\n    return COVER_VALUES[cover] > COVER_VALUES[systemCover] ? cover : undefined\r\n}\r\n", "import { createChatButton } from './chat.js'\r\nimport { VISIBILITY_VALUES } from './constants.js'\r\nimport { MODULE_ID, localize } from './module.js'\r\nimport { getVisibility } from './token.js'\r\nimport { omit } from './utils.js'\r\n\r\nexport async function checkRoll(wrapped, ...args) {\r\n    const context = args[1]\r\n    if (!context) return wrapped(...args)\r\n\r\n    const { actor, rollMode = 'roll', createMessage = 'true', type, token, target, isReroll, skipPerceptionChecks } = context\r\n    const originToken = token ?? getActorToken(actor)\r\n    const targetToken = target?.token\r\n\r\n    if (\r\n        isReroll ||\r\n        skipPerceptionChecks ||\r\n        rollMode !== 'roll' ||\r\n        !createMessage ||\r\n        !originToken ||\r\n        !targetToken ||\r\n        !['attack-roll', 'spell-attack-roll'].includes(type)\r\n    )\r\n        return wrapped(...args)\r\n\r\n    const visibility = getVisibility(targetToken, originToken)\r\n    if (!visibility) return wrapped(...args)\r\n\r\n    const dc = visibility === 'concealed' ? 5 : 11\r\n    const roll = await new Roll('1d20').evaluate({ async: true })\r\n    const total = roll.total\r\n    const isSuccess = total >= dc\r\n    const isSecret = VISIBILITY_VALUES[visibility] >= VISIBILITY_VALUES.undetected\r\n    const success = isSuccess ? 2 : 1\r\n\r\n    let flavor = `${game.i18n.localize('PF2E.FlatCheck')}:`\r\n    flavor += `<strong> ${game.i18n.localize(`PF2E.condition.${visibility}.name`)}</strong>`\r\n\r\n    flavor += (\r\n        await game.pf2e.Check.createResultFlavor({\r\n            target,\r\n            degree: {\r\n                value: success,\r\n                unadjusted: success,\r\n                adjustment: null,\r\n                dieResult: total,\r\n                rollTotal: total,\r\n                dc: { value: dc },\r\n            },\r\n        })\r\n    ).outerHTML\r\n\r\n    if (isSecret) {\r\n        const addButton = type => {\r\n            flavor += createChatButton({\r\n                action: `${type}-message`,\r\n                icon: 'fa-solid fa-message',\r\n                label: localize('message.flat-check.button', type),\r\n            })\r\n        }\r\n        if (isSuccess) addButton('success')\r\n        addButton('failure')\r\n    }\r\n\r\n    const speaker = ChatMessage.getSpeaker({ token: originToken })\r\n    const flags = isSecret ? createMessageFlag(args, visibility) : {}\r\n\r\n    await roll.toMessage({ flavor, speaker, flags }, { rollMode: isSecret ? 'blindroll' : 'roll' })\r\n\r\n    if (isSuccess && !isSecret) return wrapped(...args)\r\n}\r\n\r\nexport function rollAltedCheck(event, context, check) {\r\n    context = recreateContext(context)\r\n    if (!context) return\r\n    check = new game.pf2e.CheckModifier(check.slug, { modifiers: check.modifiers })\r\n    game.pf2e.Check.roll(check, context, event)\r\n}\r\n\r\nfunction recreateContext(context) {\r\n    const scene = game.scenes.get(context.scene)\r\n    if (!scene) return\r\n\r\n    const actor = game.actors.get(context.actor)\r\n    const token = scene.tokens.get(context.token)\r\n    const target = {\r\n        actor: game.actors.get(context.target.actor),\r\n        token: scene.tokens.get(context.target.token),\r\n    }\r\n\r\n    if (!actor || !token || !target.actor || !target.token) return null\r\n\r\n    return {\r\n        ...context,\r\n        item: context.item ? actor.items.get(context.item) : undefined,\r\n        actor,\r\n        token,\r\n        target,\r\n        options: new Set(context.options),\r\n    }\r\n}\r\n\r\nfunction createMessageFlag([check, context], visibility) {\r\n    return {\r\n        [MODULE_ID]: {\r\n            visibility,\r\n            context: {\r\n                ...context,\r\n                skipPerceptionChecks: true,\r\n                item: context.item?.id,\r\n                actor: context.actor.id,\r\n                token: context.token.id,\r\n                scene: context.token.scene.id,\r\n                target: { actor: context.target.actor.id, token: context.target.token.id },\r\n                dc: context.dc ? omit(context.dc, ['statistic']) : null,\r\n                options: Array.from(context.options),\r\n            },\r\n            check: {\r\n                slug: check.slug,\r\n                modifiers: check.modifiers.map(modifier => modifier.toObject()),\r\n            },\r\n        },\r\n    }\r\n}\r\n", "import { PerceptionMenu } from './apps/perception-menu.js'\r\nimport { MODULE_ID, getFlags, localize } from './module.js'\r\nimport { rollAltedCheck } from './roll.js'\r\n\r\nexport function renderChatMessage(message, html) {\r\n    const token = message.token\r\n    if (!token) return\r\n\r\n    const { rollCheck, context, check, visibility, cover, selected, skipWait } = getFlags(message)\r\n\r\n    if (game.user.isGM) {\r\n        if (context && check && !rollCheck) {\r\n            html.find('[data-action=success-message]').on('click', () => {\r\n                let content = localize('message.flat-check.success')\r\n                content += createChatButton({\r\n                    action: 'roll-check',\r\n                    icon: 'fa-solid fa-dice-d20',\r\n                    label: localize('message.flat-check.button', context.type),\r\n                })\r\n                createTokenMessage({ content, token, flags: { context, check, rollCheck: true } })\r\n            })\r\n            html.find('[data-action=failure-message]').on('click', () => {\r\n                createTokenMessage({ content: localize('message.flat-check.failure'), token })\r\n            })\r\n        } else if (cover && selected) {\r\n            const button = createChatButton({\r\n                action: 'validate-covers',\r\n                icon: 'fa-solid fa-list',\r\n                label: localize('message.cover.validate'),\r\n            })\r\n\r\n            html.find('.message-content').append(button)\r\n            html.find('[data-action=validate-covers]').on('click', () => {\r\n                PerceptionMenu.openMenu(token, { selected, cover })\r\n            })\r\n        }\r\n    } else {\r\n        if (visibility) {\r\n            html.find('.message-header .message-sender').text(token.name)\r\n            html.find('.message-header .flavor-text').html(\r\n                localize('message.flat-check.blind', { visibility: game.i18n.localize(`PF2E.condition.${visibility}.name`) })\r\n            )\r\n        } else if (cover && !skipWait) {\r\n            const wait = `<i style=\"display: block; font-size: .9em; text-align: end;\">${localize('message.cover.wait')}</i>`\r\n            html.find('.message-content').append(wait)\r\n        }\r\n    }\r\n\r\n    if (rollCheck) {\r\n        if (token.isOwner) {\r\n            html.find('[data-action=roll-check]').on('click', event => rollAltedCheck(event, context, check))\r\n        } else {\r\n            html.find('[data-action=roll-check]').remove()\r\n        }\r\n    }\r\n}\r\n\r\nexport function createChatButton({ action, icon, label }) {\r\n    let button = `<button type=\"button\" style=\"margin-bottom: 5px;\" data-action=\"${action}\">`\r\n    if (icon) button += `<i class=\"${icon}\"></i> ${label}</button>`\r\n    else button += label\r\n    return button\r\n}\r\n\r\nexport function createTokenMessage({ content, token, flags, secret }) {\r\n    const data = { content, speaker: ChatMessage.getSpeaker({ token: token instanceof Token ? token.document : token }) }\r\n    if (flags) setProperty(data, `flags.${MODULE_ID}`, flags)\r\n    if (secret) {\r\n        data.type = CONST.CHAT_MESSAGE_TYPES.WHISPER\r\n        data.whisper = ChatMessage.getWhisperRecipients('gm')\r\n    }\r\n    ChatMessage.create(data)\r\n}\r\n", "import { getActorToken, getCoverEffect, isProne } from './actor.js'\r\nimport { PerceptionMenu } from './apps/perception-menu.js'\r\nimport { createTokenMessage } from './chat.js'\r\nimport { createCoverSource } from './effect.js'\r\nimport { getSetting, localize, templatePath } from './module.js'\r\nimport { validateTokens } from './scene.js'\r\nimport { clearTokenData, getTokenData, setTokenData } from './token.js'\r\nimport { getPrototype } from './utils.js'\r\n\r\nexport function setupActions() {\r\n    const takeCover = game.pf2e.actions.get('take-cover')\r\n    const BaseAction = getPrototype(takeCover, 2)\r\n    const BaseActionVariant = getPrototype(takeCover.toActionVariant(), 2)\r\n\r\n    setupCover(BaseAction, BaseActionVariant)\r\n}\r\n\r\nfunction setupCover(BaseAction, BaseActionVariant) {\r\n    class TakeCoverVariant extends BaseActionVariant {\r\n        async use(options = {}) {\r\n            const action = localize('actions.take-cover')\r\n            const token = getSelectedToken(options, action)\r\n            if (token) takeCover(token)\r\n        }\r\n    }\r\n\r\n    class TakeCover extends BaseAction {\r\n        constructor() {\r\n            super({\r\n                cost: 1,\r\n                description: 'PF2E.Actions.TakeCover.Description',\r\n                img: 'systems/pf2e/icons/conditions-2/status_acup.webp',\r\n                name: 'PF2E.Actions.TakeCover.Title',\r\n                slug: 'take-cover',\r\n            })\r\n        }\r\n\r\n        toActionVariant(data) {\r\n            return new TakeCoverVariant(this, data)\r\n        }\r\n    }\r\n\r\n    game.pf2e.actions.set('take-cover', new TakeCover(BaseAction, BaseActionVariant))\r\n}\r\n\r\nasync function takeCover(token) {\r\n    const actor = token.actor\r\n    const cover = getCoverEffect(actor)\r\n    if (cover) return cover.delete()\r\n\r\n    const targets = validateTokens(token, game.user.targets.ids)\r\n    const data = getTokenData(token) ?? {}\r\n    const covers = Object.entries(data).reduce((covers, [tokenId, { cover }]) => {\r\n        if (cover) covers[tokenId] = cover\r\n        return covers\r\n    }, {})\r\n\r\n    const content = await renderTemplate(templatePath('covers-dialog'), {\r\n        i18n: key => localize(key),\r\n        hasTargets: !!targets.length,\r\n        hasCovers: !isEmpty(covers),\r\n        hasTargetCover: targets.some(id => id in covers),\r\n        isProne: isProne(actor),\r\n    })\r\n\r\n    const dialog = new Dialog({\r\n        title: `${token.name} - ${localize('actions.take-cover')}`,\r\n        content,\r\n        buttons: {},\r\n        render: html => {\r\n            html.find('button').on('click', async event => {\r\n                const { level } = event.currentTarget.dataset\r\n                const skip = getSetting('skip-cover')\r\n\r\n                const process = async (selected, cover) => {\r\n                    const flavor = cover === 'none' ? (selected === true ? 'remove-all' : 'remove') : 'take'\r\n                    createTokenMessage({\r\n                        content: localize(`message.cover.${flavor}`, { cover: localize(`cover.${cover}`) }),\r\n                        flags: { selected, cover, skipWait: skip },\r\n                        token,\r\n                        secret: !token.document.hasPlayerOwner,\r\n                    })\r\n                    if (skip) {\r\n                        if (cover === 'none' && selected === true) return clearTokenData(token)\r\n                        const data = deepClone(getTokenData(token)) ?? {}\r\n                        for (const tokenId of targets) {\r\n                            setProperty(data, `${tokenId}.cover`, cover)\r\n                        }\r\n                        return setTokenData(token, data)\r\n                    } else if (game.user.isGM) PerceptionMenu.openMenu(token, { selected, cover })\r\n                }\r\n\r\n                if (level === 'remove-all') process(true, 'none')\r\n                else if (level === 'remove') process(targets, 'none')\r\n                else if (targets.length) process(targets, level)\r\n                else {\r\n                    const source = createCoverSource(level)\r\n                    actor.createEmbeddedDocuments('Item', [source])\r\n                }\r\n\r\n                dialog.close()\r\n            })\r\n        },\r\n    }).render(true)\r\n}\r\n\r\nfunction getSelectedToken(options, action) {\r\n    let tokens = options.tokens ?? []\r\n    if (!Array.isArray(tokens)) tokens = [tokens]\r\n\r\n    let actors = options.actors ?? []\r\n    if (!Array.isArray(actors)) actors = [actors]\r\n\r\n    if (!tokens.length && actors.length === 1) tokens = [getActorToken(actors[0])].filter(Boolean)\r\n    if (!tokens.length) tokens = canvas.tokens.controlled\r\n    if (!tokens.length) tokens = [getActorToken(game.user.character)].filter(Boolean)\r\n\r\n    if (tokens.length > 1) {\r\n        ui.notifications.warn(localize('actions.only-one', { action }))\r\n        return\r\n    } else if (!tokens.length) {\r\n        ui.notifications.warn(localize('actions.must-one', { action }))\r\n        return\r\n    }\r\n\r\n    const token = tokens[0]\r\n    if (!token?.actor.isOfType('creature')) {\r\n        ui.notifications.warn(localize('actions.must-creature', { action }))\r\n        return\r\n    }\r\n\r\n    return token\r\n}\r\n", "export function allowCombatTarget(allow) {\r\n    Hooks[allow ? 'on' : 'off']('renderCombatTracker', renderCombatTracker)\r\n    ui.combat?.render()\r\n}\r\n\r\nfunction renderCombatTracker(tracker, html) {\r\n    html.find('[data-control=toggleTarget]').each((_, el) => {\r\n        el.addEventListener(\r\n            'click',\r\n            event => {\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                event.stopImmediatePropagation()\r\n\r\n                const { combatantId } = event.currentTarget.closest('.combatant').dataset\r\n                const combatant = game.combats.viewed.combatants.get(combatantId ?? '')\r\n                const token = combatant?.token\r\n                if (!token) return\r\n\r\n                const isTargeted = Array.from(game.user.targets).some(t => t.document === token)\r\n                token.object.setTarget(!isTargeted, { releaseOthers: !event.shiftKey })\r\n            },\r\n            true\r\n        )\r\n    })\r\n}\r\n", "import { VISIBILITY_VALUES } from './constants.js'\r\nimport { getTokenData } from './token.js'\r\n\r\nexport function basicSightCanDetect(wrapped, visionSource, target) {\r\n    if (!wrapped(visionSource, target)) return false\r\n    return !isValidTarget(target) || !isUndetected(target, 'basicSight', VISIBILITY_VALUES.hidden)\r\n}\r\n\r\nexport function hearingCanDetect(wrapped, visionSource, target) {\r\n    if (!wrapped(visionSource, target)) return false\r\n    if (!game.settings.get('pf2e', 'automation.rulesBasedVision')) return true\r\n    return !visionSource.object.actor?.hasCondition('deafened') && isValidTarget(target) && !isUndetected(target, 'hearing')\r\n}\r\n\r\nexport function feelTremorCanDetect(wrapped, visionSource, target) {\r\n    if (!wrapped(visionSource, target)) return false\r\n    return isValidTarget(target) && !isUndetected(target, 'feelTremor')\r\n}\r\n\r\nfunction isValidTarget(target) {\r\n    return !!(target instanceof Token && target.actor)\r\n}\r\n\r\nfunction isUndetected(target, mode, threshold = VISIBILITY_VALUES.undetected) {\r\n    const tokens = game.user.isGM ? canvas.tokens.controlled : target.scene.tokens.filter(t => t.isOwner)\r\n    const filtered = tokens.filter(t => t.detectionModes.some(d => d.id === mode))\r\n\r\n    for (const origin of filtered) {\r\n        const visibility = getTokenData(target, origin.id, 'visibility')\r\n        if (VISIBILITY_VALUES[visibility] >= threshold) return true\r\n    }\r\n\r\n    return false\r\n}\r\n", "import { MODULE_ID } from './module.js'\r\nimport { allowCombatTarget } from './combat.js'\r\n\r\nexport function registerSettings() {\r\n    register('target', Boolean, true, {\r\n        onChange: allowCombatTarget,\r\n    })\r\n\r\n    register('lesser', Boolean, true)\r\n\r\n    register('standard', Boolean, true)\r\n\r\n    register('standard-type', String, 'center', {\r\n        choices: {\r\n            center: path('standard-type', 'choices.center'),\r\n            points: path('standard-type', 'choices.points'),\r\n            // corners: path('standard-type', 'choices.corners'),\r\n        },\r\n    })\r\n\r\n    register('skip-cover', Boolean, true)\r\n}\r\n\r\nfunction path(setting, key) {\r\n    return `${MODULE_ID}.settings.${setting}.${key}`\r\n}\r\n\r\nfunction register(name, type, defValue, extra = {}) {\r\n    game.settings.register(MODULE_ID, name, {\r\n        name: path(name, 'name'),\r\n        hint: path(name, 'hint'),\r\n        scope: 'world',\r\n        config: true,\r\n        type,\r\n        default: defValue,\r\n        ...extra,\r\n    })\r\n}\r\n", "import { setupActions } from './action.js'\r\nimport { getContextualClone, getSelfRollOptions } from './actor.js'\r\nimport { renderChatMessage } from './chat.js'\r\nimport { allowCombatTarget } from './combat.js'\r\nimport { basicSightCanDetect, feelTremorCanDetect, hearingCanDetect } from './detection.js'\r\nimport { MODULE_ID, getSetting } from './module.js'\r\nimport { checkRoll } from './roll.js'\r\nimport { renderSceneConfig } from './scene.js'\r\nimport { registerSettings } from './settings.js'\r\nimport { pasteToken, renderTokenHUD, updateToken } from './token.js'\r\n\r\nconst CHECK_ROLL = 'game.pf2e.Check.roll'\r\n\r\nconst GET_CONTEXTUAL_CLONE = 'CONFIG.Actor.documentClass.prototype.getContextualClone'\r\nconst GET_SELF_ROLL_OPTIONS = 'CONFIG.Actor.documentClass.prototype.getSelfRollOptions'\r\n\r\nconst BASIC_SIGHT_CAN_DETECT = 'CONFIG.Canvas.detectionModes.basicSight._canDetect'\r\nconst HEARING_CAN_DETECT = 'CONFIG.Canvas.detectionModes.hearing._canDetect'\r\nconst FEEL_TREMOR_CAN_DETECT = 'CONFIG.Canvas.detectionModes.feelTremor._canDetect'\r\n\r\nHooks.once('setup', () => {\r\n    registerSettings()\r\n    setupActions()\r\n\r\n    if (game.user.isGM) {\r\n        Hooks.on('renderTokenHUD', renderTokenHUD)\r\n    }\r\n\r\n    libWrapper.register(MODULE_ID, CHECK_ROLL, checkRoll)\r\n\r\n    libWrapper.register(MODULE_ID, GET_CONTEXTUAL_CLONE, getContextualClone)\r\n    libWrapper.register(MODULE_ID, GET_SELF_ROLL_OPTIONS, getSelfRollOptions)\r\n\r\n    libWrapper.register(MODULE_ID, BASIC_SIGHT_CAN_DETECT, basicSightCanDetect)\r\n    libWrapper.register(MODULE_ID, HEARING_CAN_DETECT, hearingCanDetect)\r\n    libWrapper.register(MODULE_ID, FEEL_TREMOR_CAN_DETECT, feelTremorCanDetect)\r\n\r\n    if (!game.user.isGM && getSetting('target')) allowCombatTarget(true)\r\n})\r\n\r\nHooks.on('pasteToken', pasteToken)\r\n\r\nHooks.on('updateToken', updateToken)\r\n\r\nHooks.on('renderChatMessage', renderChatMessage)\r\n\r\nHooks.on('renderSceneConfig', renderSceneConfig)\r\n"],
  "mappings": "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",
  "names": ["token", "tokenId", "path", "token", "visibility", "getActorToken", "type", "takeCover", "covers", "cover", "data", "getActorToken"]
}
